version: '3.8'

services:
  postgres:
    image: postgres:15
    container_name: facial_recognition_db
    environment:
      POSTGRES_DB: ${DB_NAME:-face_tracking_spa}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-facial_recognition_2024}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
    networks:
      - facial_recognition_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-face_tracking_spa}"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build:
      context: .
      dockerfile: deployment/docker/backend.Dockerfile
    container_name: facial_recognition_backend
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-face_tracking_spa}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-facial_recognition_2024}
      - SECRET_KEY=${SECRET_KEY:-your_super_secret_key_change_in_production}
      - DEBUG=${DEBUG:-False}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - FACE_DETECTION_THRESHOLD=${FACE_DETECTION_THRESHOLD:-0.5}
      - FACE_MATCH_THRESHOLD=${FACE_MATCH_THRESHOLD:-0.6}
    ports:
      - "8000:8000"
    volumes:
      - ./uploads:/app/uploads
      - ./logs:/app/logs
      - /dev:/dev  # For camera access
    devices:
      - /dev/video0:/dev/video0  # Camera device (adjust as needed)
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - facial_recognition_network
    restart: unless-stopped
    privileged: true  # Required for camera access
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: ../deployment/docker/frontend.Dockerfile
    container_name: facial_recognition_frontend
    environment:
      - REACT_APP_API_URL=http://localhost:8000/api/v1
      - REACT_APP_WS_URL=ws://localhost:8000/ws
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - facial_recognition_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    build:
      context: .
      dockerfile: deployment/docker/nginx.Dockerfile
    container_name: facial_recognition_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./deployment/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - facial_recognition_network
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: facial_recognition_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - facial_recognition_network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  facial_recognition_network:
    driver: bridge